// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prompt {
  id              Int          @id @default(autoincrement())
  title           String
  description     String
  promptText      String
  inputs          String[]
  sampleOutput    String
  author          User         @relation("prompt_author", fields: [authorId], references: [id])
  authorId        String
  starUsers       User[]
  inPromptLists   PromptList[]
  tags            Tag[]
  createdDatetime DateTime     @default(now())
  updateDatetime  DateTime     @updatedAt
}

model PromptList {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  author          User     @relation(fields: [authorId], references: [id])
  authorId        String
  prompts         Prompt[]
  createdDatetime DateTime @default(now())
  updateDatetime  DateTime @updatedAt
}

model User {
  id             String       @id @default(uuid())
  username       String       @unique
  email          String       @unique
  fullname       String
  bio            String?
  profilePicUri  String?
  createdPrompts Prompt[]     @relation("prompt_author")
  starredPrompts Prompt[]
  comments       Comment[]
  subComments    SubComment[]
  promptLists    PromptList[]
}

model Comment {
  id              Int          @id @default(autoincrement())
  author          User         @relation(fields: [authorId], references: [id])
  authorId        String
  value           String
  createdDatetime DateTime     @default(now())
  updateDatetime  DateTime     @updatedAt
  subComments     SubComment[]
}

model SubComment {
  id              Int      @id @default(autoincrement())
  author          User     @relation(fields: [authorId], references: [id])
  authorId        String
  value           String
  parentComment   Comment  @relation(fields: [commentId], references: [id])
  commentId       Int
  createdDatetime DateTime @default(now())
  updateDatetime  DateTime @updatedAt
}

model Tag {
  id      Int      @id @default(autoincrement())
  value   String
  prompts Prompt[]
}