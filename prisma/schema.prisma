// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prompt {
  id              Int          @id @default(autoincrement())
  title           String
  description     String
  promptText      String
  inputs          String[]
  sampleOutput    String
  author          User         @relation("prompt_author", fields: [authorId], references: [id])
  authorId        String
  starUsers       User[]
  inPromptLists   PromptList[]
  tags            Tag[]
  platform        String
  createdDatetime DateTime     @default(now())
  updateDatetime  DateTime     @updatedAt
}

model PromptList {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  author          User     @relation("user_create_list", fields: [authorId], references: [id])
  authorId        String
  prompts         Prompt[]
  starUsers       User[]   @relation("user_star_list")
  createdDatetime DateTime @default(now())
  updateDatetime  DateTime @updatedAt
  userId          String?
}

model User {
  id              String            @id @default(uuid())
  username        String            @unique
  email           String            @unique
  fullname        String
  bio             String?
  profilePicUri   String?
  createdPrompts  Prompt[]          @relation("prompt_author")
  starredPrompts  Prompt[]
  comments        Comment[]
  promptLists     PromptList[]      @relation("user_create_list")
  starredLists    PromptList[]      @relation("user_star_list")
  UserLikeComment UserLikeComment[]
}

model Comment {
  id              Int               @id @default(autoincrement())
  author          User              @relation(fields: [authorId], references: [id])
  authorId        String
  value           String
  createdDatetime DateTime          @default(now())
  updateDatetime  DateTime          @updatedAt
  subComments     Comment[]         @relation("SubComments")
  parentComment   Comment?          @relation("SubComments", fields: [parentCommentId], references: [id])
  parentCommentId Int
  likes           UserLikeComment[]
}

model UserLikeComment {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])
  userId    String
  commentId Int
}

// model SubComment {
//   id              Int      @id @default(autoincrement())
//   author          User     @relation(fields: [authorId], references: [id])
//   authorId        String
//   value           String
//   parentComment   Comment  @relation(fields: [commentId], references: [id])
//   commentId       Int
//   createdDatetime DateTime @default(now())
//   updateDatetime  DateTime @updatedAt
// }

model Tag {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  prompts Prompt[]
}
